import { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useRouter } from 'next/router';
import Link from 'next/link';
import {
  Container, Row, Col, Card, Button, Form, Spinner,
  Table, Badge, Alert, Modal, InputGroup
} from 'react-bootstrap';

interface ApiKey {
  id: number;
  name: string;
  service: 'google' | 'openai' | 'azure' | 'anthropic';
  key: string;
  status: 'active' | 'inactive';
  created_at: string;
  last_used: string | null;
  usage_count: number;
}

const ApiManagement = () => {
  const { user, loading } = useAuth();
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [apiKeys, setApiKeys] = useState<ApiKey[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showKeyModal, setShowKeyModal] = useState(false);
  const [selectedKey, setSelectedKey] = useState<ApiKey | null>(null);
  const [formData, setFormData] = useState({
    service: 'google',
    key: '',
    name: ''
  });
  const [testResults, setTestResults] = useState<Record<string, any> | null>(null);
  const [isTesting, setIsTesting] = useState(false);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  useEffect(() => {
    if (!loading && !user) {
      router.push('/auth/signin');
    } else if (user) {
      fetchApiKeys();
    }
  }, [user, loading, router]);

  const fetchApiKeys = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      // G·ªçi API th·ª±c t·∫ø ƒë·ªÉ l·∫•y danh s√°ch API keys
      const response = await fetch('/api/admin/tokens', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`L·ªói API: ${response.status}`);
      }
      
      const data = await response.json();
      setApiKeys(data);
      setIsLoading(false);
    } catch (err) {
      console.error('Error fetching API keys:', err);
      setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch API keys. Vui l√≤ng th·ª≠ l·∫°i sau.');
      setIsLoading(false);
      
      // Trong m√¥i tr∆∞·ªùng development, hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u khi API ch∆∞a s·∫µn s√†ng
      if (process.env.NODE_ENV === 'development') {
        console.log('Loading sample data in development mode');
        // D·ªØ li·ªáu m·∫´u
        const today = new Date();
        const yesterday = new Date(today);
        yesterday.setDate(today.getDate() - 1);
        
        setApiKeys([
          {
            id: 1,
            name: 'Gemini Pro Production',
            service: 'google',
            key: 'AIza***********************Ahlw',
            status: 'active',
            created_at: '2023-06-15',
            last_used: today.toISOString(),
            usage_count: 168
          },
          {
            id: 2,
            name: 'OpenAI GPT-4 Production',
            service: 'openai',
            key: 'sk-*************************fDbQ',
            status: 'active',
            created_at: '2023-05-20',
            last_used: yesterday.toISOString(),
            usage_count: 42
          },
          {
            id: 3,
            name: 'Gemini Ultra Testing',
            service: 'google',
            key: 'AIza***********************KbJs',
            status: 'inactive',
            created_at: '2023-07-10',
            last_used: null,
            usage_count: 5
          },
          {
            id: 4,
            name: 'Claude 3 Production',
            service: 'anthropic',
            key: 'sk-ant-*******************DrPs',
            status: 'active',
            created_at: '2023-08-05',
            last_used: today.toISOString(),
            usage_count: 23
          }
        ]);
      }
    }
  };

  const handleAddKey = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      setIsLoading(true);
      
      // G·ªçi API th·ª±c t·∫ø ƒë·ªÉ th√™m API key m·ªõi
      const response = await fetch('/api/admin/tokens', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        throw new Error(`L·ªói API: ${response.status}`);
      }
      
      const result = await response.json();
      setShowAddModal(false);
      setFormData({ name: '', service: 'google', key: '' });
      setError(null);
      
      // T·∫£i l·∫°i danh s√°ch API keys
      fetchApiKeys();
    } catch (err) {
      console.error('Error adding API key:', err);
      setError('Kh√¥ng th·ªÉ th√™m API key. Vui l√≤ng th·ª≠ l·∫°i sau.');
    } finally {
      setIsLoading(false);
    }
  };

  const toggleKeyStatus = async (id: number, currentStatus: string) => {
    try {
      const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
      
      // G·ªçi API th·ª±c t·∫ø ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i API key
      const response = await fetch('/api/admin/tokens', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ id, status: newStatus }),
      });

      if (!response.ok) {
        throw new Error(`L·ªói API: ${response.status}`);
      }
      
      // C·∫≠p nh·∫≠t state
      setApiKeys(prevKeys => 
        prevKeys.map(key => 
          key.id === id ? { ...key, status: newStatus as 'active' | 'inactive' } : key
        )
      );
      
      setSuccessMessage(`Tr·∫°ng th√°i API key ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh ${newStatus === 'active' ? 'Ho·∫°t ƒë·ªông' : 'Kh√¥ng ho·∫°t ƒë·ªông'}`);
    } catch (err) {
      console.error('Error updating API key status:', err);
      setError('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i API key. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  };

  const deleteKey = async (id: number) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a API key n√†y kh√¥ng?')) {
      try {
        // G·ªçi API th·ª±c t·∫ø ƒë·ªÉ x√≥a API key
        const response = await fetch(`/api/admin/tokens?id=${id}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        if (!response.ok) {
          throw new Error(`L·ªói API: ${response.status}`);
        }
        
        // C·∫≠p nh·∫≠t state
        setApiKeys(prevKeys => prevKeys.filter(key => key.id !== id));
        setError(null);
      } catch (err) {
        console.error('Error deleting API key:', err);
        setError('Kh√¥ng th·ªÉ x√≥a API key. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
    }
  };

  const viewKey = (key: ApiKey) => {
    setSelectedKey(key);
    setShowKeyModal(true);
  };

  const testApiConnection = async () => {
    try {
      setIsTesting(true);
      setTestResults(null);
      
      // Gi·∫£ l·∫≠p ki·ªÉm tra k·∫øt n·ªëi - thay th·∫ø b·∫±ng API call th·ª±c t·∫ø trong production
      setTimeout(() => {
        setTestResults({
          google: {
            status: 'success',
            latency: '210ms',
            message: 'K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn Gemini API'
          },
          openai: {
            status: 'warning',
            latency: '450ms',
            message: 'K·∫øt n·ªëi th√†nh c√¥ng nh∆∞ng ƒë·ªô tr·ªÖ cao'
          },
          huggingface: {
            status: 'success',
            latency: '320ms',
            message: 'K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn Hugging Face API'
          },
          anthropic: {
            status: 'error',
            latency: 'N/A',
            message: 'Kh√¥ng t√¨m th·∫•y API key'
          }
        });
        setIsTesting(false);
      }, 2000);
    } catch (err) {
      console.error('Error testing API connections:', err);
      setTestResults({
        error: 'ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra k·∫øt n·ªëi API.'
      });
      setIsTesting(false);
    }
  };

  const getServiceIcon = (service: string) => {
    switch (service) {
      case 'google': return 'üåÄ'; // Gemini
      case 'openai': return 'ü§ñ'; // OpenAI
      case 'huggingface': return 'ü§ó'; // Hugging Face
      case 'anthropic': return 'üß†'; // Claude
      default: return 'üîë';
    }
  };

  const getServiceColor = (service: string) => {
    switch (service) {
      case 'google': return 'primary';
      case 'openai': return 'success';
      case 'huggingface': return 'info';
      case 'anthropic': return 'secondary';
      default: return 'dark';
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'success': return <Badge bg="success">Th√†nh c√¥ng</Badge>;
      case 'warning': return <Badge bg="warning">C·∫£nh b√°o</Badge>;
      case 'error': return <Badge bg="danger">L·ªói</Badge>;
      default: return <Badge bg="secondary">Kh√¥ng x√°c ƒë·ªãnh</Badge>;
    }
  };

  if (loading) {
    return (
      <Container className="d-flex justify-content-center align-items-center" style={{ minHeight: '70vh' }}>
        <Spinner animation="border" role="status">
          <span className="visually-hidden">ƒêang t·∫£i...</span>
        </Spinner>
      </Container>
    );
  }

  return (
    <Container className="py-5">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1>Qu·∫£n l√Ω API</h1>
          <p className="text-muted">Qu·∫£n l√Ω API keys v√† c√†i ƒë·∫∑t k·∫øt n·ªëi</p>
        </div>
        <div>
          <Button variant="outline-secondary" onClick={() => router.push('/admin')} className="me-2">
            Quay l·∫°i Dashboard
          </Button>
          <Button variant="primary" onClick={() => setShowAddModal(true)}>
            Th√™m API Key
          </Button>
        </div>
      </div>

      {error && <Alert variant="danger">{error}</Alert>}
      {successMessage && <Alert variant="success">{successMessage}</Alert>}

      <Row className="mb-4">
        <Col lg={8}>
          <Card>
            <Card.Header>
              <div className="d-flex justify-content-between align-items-center">
                <h5 className="mb-0">API Keys</h5>
                <Button variant="outline-primary" size="sm" onClick={fetchApiKeys}>
                  <i className="bi bi-arrow-clockwise"></i> L√†m m·ªõi
                </Button>
              </div>
            </Card.Header>
            <Card.Body>
              {isLoading ? (
                <div className="text-center py-4">
                  <Spinner animation="border" />
                  <p className="mt-2">ƒêang t·∫£i danh s√°ch API keys...</p>
                </div>
              ) : apiKeys.length > 0 ? (
                <Table responsive striped hover>
                  <thead>
                    <tr>
                      <th>T√™n</th>
                      <th>D·ªãch v·ª•</th>
                      <th>Key</th>
                      <th>Tr·∫°ng th√°i</th>
                      <th>L∆∞·ª£t s·ª≠ d·ª•ng</th>
                      <th>H√†nh ƒë·ªông</th>
                    </tr>
                  </thead>
                  <tbody>
                    {apiKeys.map(apiKey => (
                      <tr key={apiKey.id}>
                        <td>{apiKey.name}</td>
                        <td>
                          <Badge bg={getServiceColor(apiKey.service)} className="text-white">
                            {getServiceIcon(apiKey.service)} {apiKey.service.toUpperCase()}
                          </Badge>
                        </td>
                        <td>
                          <code>{apiKey.key}</code>
                          <Button 
                            variant="link" 
                            size="sm" 
                            className="p-0 ms-2"
                            onClick={() => viewKey(apiKey)}
                          >
                            <i className="bi bi-eye"></i>
                          </Button>
                        </td>
                        <td>
                          <Form.Check 
                            type="switch"
                            checked={apiKey.status === 'active'}
                            onChange={(e) => toggleKeyStatus(apiKey.id, apiKey.status)}
                            label={apiKey.status === 'active' ? "ƒêang ho·∫°t ƒë·ªông" : "V√¥ hi·ªáu h√≥a"}
                          />
                        </td>
                        <td>{apiKey.usage_count}</td>
                        <td>
                          <Button variant="outline-danger" size="sm" onClick={() => deleteKey(apiKey.id)}>
                            <i className="bi bi-trash"></i>
                          </Button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </Table>
              ) : (
                <div className="text-center py-4">
                  <p>Kh√¥ng c√≥ API key n√†o. H√£y th√™m API key m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu.</p>
                  <Button variant="primary" onClick={() => setShowAddModal(true)}>
                    Th√™m API Key
                  </Button>
                </div>
              )}
            </Card.Body>
          </Card>
        </Col>
        <Col lg={4}>
          <Card>
            <Card.Header>
              <h5 className="mb-0">Ki·ªÉm tra k·∫øt n·ªëi</h5>
            </Card.Header>
            <Card.Body>
              <p>Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn c√°c API d·ªãch v·ª•</p>
              <Button 
                variant="primary" 
                className="w-100"
                onClick={testApiConnection}
                disabled={isTesting}
              >
                {isTesting ? (
                  <>
                    <Spinner as="span" animation="border" size="sm" role="status" aria-hidden="true" />
                    {' '}ƒêang ki·ªÉm tra...
                  </>
                ) : 'Ki·ªÉm tra t·∫•t c·∫£ API'}
              </Button>

              {testResults && !testResults.error && (
                <div className="mt-4">
                  <h6>K·∫øt qu·∫£ ki·ªÉm tra:</h6>
                  <ul className="list-group">
                    {Object.entries(testResults).map(([service, result]: [string, any]) => (
                      <li key={service} className="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                          <span className="me-2">{getServiceIcon(service)}</span>
                          <strong className="text-capitalize">{service}</strong>
                          <p className="mb-0 small">{result.message}</p>
                        </div>
                        <div className="text-end">
                          {getStatusBadge(result.status)}
                          {result.latency && <div className="small">{result.latency}</div>}
                        </div>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {testResults && testResults.error && (
                <Alert variant="danger" className="mt-3">
                  {testResults.error}
                </Alert>
              )}
            </Card.Body>
          </Card>

          <Card className="mt-3">
            <Card.Header>
              <h5 className="mb-0">Th√¥ng tin s·ª≠ d·ª•ng</h5>
            </Card.Header>
            <Card.Body>
              <p>Theo d√µi chi ti·∫øt vi·ªác s·ª≠ d·ª•ng API v√† token</p>
              <Link href="/admin/token-usage" passHref>
                <Button variant="outline-primary" className="w-100">
                  Xem th·ªëng k√™ chi ti·∫øt
                </Button>
              </Link>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* Modal th√™m API key m·ªõi */}
      <Modal show={showAddModal} onHide={() => setShowAddModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Th√™m API Key m·ªõi</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>T√™n</Form.Label>
              <Form.Control 
                type="text" 
                placeholder="Nh·∫≠p t√™n ƒë·ªÉ nh·∫≠n di·ªán API key n√†y"
                value={formData.name}
                onChange={(e) => setFormData({...formData, name: e.target.value})}
              />
              <Form.Text muted>
                V√≠ d·ª•: "Gemini API Production", "OpenAI Testing"
              </Form.Text>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>D·ªãch v·ª•</Form.Label>
              <Form.Select 
                value={formData.service}
                onChange={(e) => setFormData({...formData, service: e.target.value})}
              >
                <option value="google">Google (Gemini)</option>
                <option value="openai">OpenAI</option>
                <option value="huggingface">Hugging Face</option>
                <option value="anthropic">Anthropic (Claude)</option>
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>API Key</Form.Label>
              <Form.Control 
                type="password" 
                placeholder="Nh·∫≠p API key"
                value={formData.key}
                onChange={(e) => setFormData({...formData, key: e.target.value})}
              />
              <Form.Text muted>
                API key s·∫Ω ƒë∆∞·ª£c m√£ h√≥a tr∆∞·ªõc khi l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu.
              </Form.Text>
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAddModal(false)}>
            H·ªßy
          </Button>
          <Button 
            variant="primary" 
            onClick={handleAddKey}
            disabled={!formData.key || !formData.name}
          >
            Th√™m API Key
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Modal xem chi ti·∫øt API key */}
      <Modal show={showKeyModal} onHide={() => setShowKeyModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>{selectedKey?.name}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {selectedKey && (
            <>
              <p><strong>D·ªãch v·ª•:</strong> {getServiceIcon(selectedKey.service)} {selectedKey.service.toUpperCase()}</p>
              <p><strong>API Key:</strong></p>
              <InputGroup className="mb-3">
                <Form.Control
                  type="text"
                  value={selectedKey.key}
                  readOnly
                />
                <Button variant="outline-secondary">
                  <i className="bi bi-clipboard"></i>
                </Button>
              </InputGroup>
              <p><strong>Tr·∫°ng th√°i:</strong> {selectedKey.status === 'active' ? 'ƒêang ho·∫°t ƒë·ªông' : 'V√¥ hi·ªáu h√≥a'}</p>
              <p><strong>Ng√†y t·∫°o:</strong> {new Date(selectedKey.created_at).toLocaleString()}</p>
              {selectedKey.last_used && (
                <p><strong>L·∫ßn s·ª≠ d·ª•ng cu·ªëi:</strong> {new Date(selectedKey.last_used).toLocaleString()}</p>
              )}
              <p><strong>L∆∞·ª£t s·ª≠ d·ª•ng:</strong> {selectedKey.usage_count}</p>
            </>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowKeyModal(false)}>
            ƒê√≥ng
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default ApiManagement;
