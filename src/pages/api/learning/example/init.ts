import type { NextApiRequest, NextApiResponse } from 'next';
import { db } from '@/lib/mysql';
import { generateContentWithTiming, generateJSONContent } from '@/lib/gemini';

interface Word {
  id: string;
  word: string;
  meaning: string;
  example: string;
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const firebase_uid = req.headers.firebase_uid as string;
  if (!firebase_uid) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  // L·∫•y s·ªë l∆∞·ª£ng t·ª´ v·ª±ng t·ª´ query params, m·∫∑c ƒë·ªãnh l√† 10
  const count = parseInt(req.query.count as string || '10', 10);
  // L·∫•y danh s√°ch t·ª´ v·ª±ng c·ª• th·ªÉ n·∫øu c√≥
  const words = req.query.words ? (req.query.words as string).split(',') : [];

  try {
    let termsQuery: string;
    let params: any[];

    if (words.length > 0) {
      // N·∫øu c√≥ danh s√°ch t·ª´ v·ª±ng c·ª• th·ªÉ
      const wordIds = words.map(id => parseInt(id.trim(), 10)).filter(id => !isNaN(id));

      if (wordIds.length > 0) {
        if (wordIds.length === 1) {
          // Tr∆∞·ªùng h·ª£p ch·ªâ c√≥ m·ªôt ID, s·ª≠ d·ª•ng raw query ƒë·ªÉ tr√°nh l·ªói prepared statement
          termsQuery = `
            SELECT id, vocab as word, meanings 
            FROM terms 
            WHERE firebase_uid = '${firebase_uid}' AND id = ${wordIds[0]}
            LIMIT ${count}
          `;
          params = [];

        } else {
          // Tr∆∞·ªùng h·ª£p c√≥ nhi·ªÅu ID, s·ª≠ d·ª•ng raw query ƒë·ªÉ tr√°nh l·ªói prepared statement
          const placeholders = wordIds.join(',');
          termsQuery = `
            SELECT id, vocab as word, meanings 
            FROM terms 
            WHERE firebase_uid = '${firebase_uid}' AND id IN (${placeholders})
            ORDER BY FIELD(id, ${placeholders})
            LIMIT ${count}
          `;
          params = [];
        }
      } else {
        // Fallback to random if all word IDs are invalid - s·ª≠ d·ª•ng raw query
        termsQuery = `
          SELECT id, vocab as word, meanings 
          FROM terms 
          WHERE firebase_uid = '${firebase_uid}' 
          ORDER BY RAND() 
          LIMIT ${count}
        `;
        params = [];
      }
    } else {
      // N·∫øu kh√¥ng c√≥ danh s√°ch t·ª´ v·ª±ng c·ª• th·ªÉ, l·∫•y ng·∫´u nhi√™n - s·ª≠ d·ª•ng raw query
      termsQuery = `
        SELECT id, vocab as word, meanings 
        FROM terms 
        WHERE firebase_uid = '${firebase_uid}' 
        ORDER BY RAND() 
        LIMIT ${count}
      `;
      params = [];
    }


    
    // S·ª≠ d·ª•ng query cho raw SQL ho·∫∑c execute cho prepared statement
    const [terms] = params.length === 0 ? await db.query(termsQuery) : await db.execute(termsQuery, params);

    if (!terms || (terms as any[]).length === 0) {
      return res.status(200).json({ words: [] });
    }

    // X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ v·ª±ng
    const processedWords: Word[] = (terms as any[]).map(term => {
      let meanings = [];
      try {
        if (term.meanings) {
          if (typeof term.meanings === 'string') {
            meanings = JSON.parse(term.meanings);
          } else {
            meanings = term.meanings;
          }
        }
        if (!Array.isArray(meanings)) meanings = [];
      } catch (e) {
        meanings = [];
      }

      // L·∫•y nghƒ©a ti·∫øng Vi·ªát ƒë·∫ßu ti√™n
      const meaning = meanings.length > 0 ? meanings[0] : '';

      return {
        id: term.id,
        word: term.word,
        meaning,
        example: '' // S·∫Ω ƒë∆∞·ª£c ƒëi·ªÅn b·ªüi Gemini API
      };
    });

    // T·∫°o c√¢u v√≠ d·ª• cho t·ª´ng t·ª´ b·∫±ng Gemini API
    const wordsWithExamples = await generateExamples(processedWords);

    return res.status(200).json({ words: wordsWithExamples });
  } catch (error) {
    console.error('Error in example learning init:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}

async function generateExamples(words: Word[]): Promise<Word[]> {
  interface Example {
    word: string;
    example: string;
  }
  try {
    // T·∫°o danh s√°ch t·ª´ v·ª±ng ƒë·ªÉ g·ª≠i ƒë·∫øn Gemini API
    const wordsList = words.map(word => `${word.word} (${word.meaning})`).join('\n');

    // T·∫°o prompt cho Gemini API
    const prompt = `
B·∫°n l√† m·ªôt gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp. H√£y t·∫°o c√°c c√¢u v√≠ d·ª• b·∫±ng ti·∫øng Vi·ªát cho danh s√°ch t·ª´ v·ª±ng ti·∫øng Anh sau ƒë√¢y. M·ªói c√¢u v√≠ d·ª• ph·∫£i s·ª≠ d·ª•ng t·ª´ v·ª±ng m·ªôt c√°ch t·ª± nhi√™n v√† ƒë√∫ng ng·ªØ c·∫£nh.

Danh s√°ch t·ª´ v·ª±ng:
${wordsList}

Y√™u c·∫ßu:
1. T·∫°o m·ªôt c√¢u v√≠ d·ª• b·∫±ng ti·∫øng Vi·ªát cho m·ªói t·ª´.
2. C√¢u v√≠ d·ª• ph·∫£i ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu v√† ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh s·ª≠ d·ª•ng th√¥ng th∆∞·ªùng c·ªßa t·ª´.
3. C√¢u v√≠ d·ª• n√™n c√≥ ƒë·ªô d√†i v·ª´a ph·∫£i (10-15 t·ª´).
4. ƒê·∫£m b·∫£o c√¢u v√≠ d·ª• th·ªÉ hi·ªán ƒë√∫ng nghƒ©a v√† c√°ch s·ª≠ d·ª•ng c·ªßa t·ª´.

Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON v·ªõi c·∫•u tr√∫c sau:
{
  "examples": [
    {
      "word": "t·ª´ ti·∫øng Anh",
      "meaning": "nghƒ©a ti·∫øng Vi·ªát",
      "example": "c√¢u v√≠ d·ª• ti·∫øng Vi·ªát"
    }
  ]
}
`;

    console.log('üì§ G·ª≠i y√™u c·∫ßu t·∫°o v√≠ d·ª• t·ªõi Gemini API v·ªõi Streaming');
    console.log('üåè Region: asia-southeast1 (Singapore) - T·ªëi ∆∞u t·ªëc ƒë·ªô');
    
    let examples: Example[] = [];
    
    try {
      // S·ª≠ d·ª•ng streaming API ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô ph·∫£n h·ªìi
      const result = await generateJSONContent(prompt, 'gemini-1.5-flash');
      console.log(`‚ö° Th·ªùi gian ph·∫£n h·ªìi streaming: ${Date.now() - Date.now()}ms`);
      
      if (result && result.examples && Array.isArray(result.examples)) {
        examples = result.examples;
        console.log(`‚úÖ Parsed ${examples.length} examples t·ª´ streaming response`);
      } else {
        console.warn('‚ö†Ô∏è Streaming response kh√¥ng c√≥ format mong ƒë·ª£i, th·ª≠ parse th·ªß c√¥ng');
        // Fallback parsing logic s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b√™n d∆∞·ªõi
      }

      // N·∫øu streaming th√†nh c√¥ng v√† c√≥ examples, s·ª≠ d·ª•ng k·∫øt qu·∫£ ƒë√≥
      if (examples.length === 0) {
        console.log('üîÑ Th·ª≠ parse t·ª´ raw streaming response...');
        // Logic fallback parsing c√≥ th·ªÉ ƒë∆∞·ª£c th√™m v√†o ƒë√¢y n·∫øu c·∫ßn
      }
      
    } catch (streamingError) {
      console.error('‚ùå L·ªói streaming API:', streamingError);
      console.log('üîÑ Fallback to standard API...');
      
      try {
        // Fallback to standard API
        const fallbackResult = await generateContentWithTiming(prompt, 'gemini-1.5-flash', false);
        console.log(`‚ö° Th·ªùi gian ph·∫£n h·ªìi fallback: ${fallbackResult.duration}ms`);
        
        try {
          // T√¨m v√† parse JSON trong text
          let jsonMatch = fallbackResult.text.match(/\{[\s\S]*\}/);
          let jsonText = jsonMatch ? jsonMatch[0] : fallbackResult.text;
          
          // Lo·∫°i b·ªè markdown tr∆∞·ªõc khi parse
          jsonText = jsonText
            .replace(/^```json\s*/i, '')
            .replace(/^```\s*/i, '')
            .replace(/\s*```\s*$/i, '')
            .trim();
          
          const parsed = JSON.parse(jsonText);
          
          if (parsed.examples && Array.isArray(parsed.examples)) {
            examples = parsed.examples;
            console.log(`‚úÖ Parsed ${examples.length} examples t·ª´ fallback`);
          } else {
            console.warn('‚ö†Ô∏è Fallback response kh√¥ng c√≥ format mong ƒë·ª£i');
            console.log('üìÑ Parsed data:', parsed);
          }
        } catch (parseError) {
          console.error('‚ùå L·ªói parse JSON fallback:', parseError);
          console.log('üìÑ Raw text:', fallbackResult.text);
          // Tr·∫£ v·ªÅ danh s√°ch t·ª´ v·ª±ng ban ƒë·∫ßu n·∫øu c√≥ l·ªói parse
          return words;
        }
        
      } catch (fallbackError) {
        console.error('‚ùå C·∫£ streaming v√† fallback ƒë·ªÅu th·∫•t b·∫°i:', fallbackError);
        // Tr·∫£ v·ªÅ danh s√°ch t·ª´ v·ª±ng ban ƒë·∫ßu n·∫øu c√≥ l·ªói
        return words;
      }
    }

    // K·∫øt h·ª£p v√≠ d·ª• v·ªõi danh s√°ch t·ª´ v·ª±ng ban ƒë·∫ßu
    const wordsWithExamples = words.map(word => {
      const matchingExample = examples.find((ex: Example) => ex.word === word.word);
      return {
        ...word,
        example: matchingExample ? matchingExample.example : ''
      };
    });

    return wordsWithExamples;
  } catch (error) {
    console.error('Error generating examples:', error);
    return words;
  }
}