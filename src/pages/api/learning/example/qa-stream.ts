import type { NextApiRequest, NextApiResponse } from 'next';
import { generateContentStream } from '@/lib/gemini';
import { safeJsonParse, extractJson } from '@/utils/jsonUtils';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const requestId = `qa_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  console.log(`üöÄ [${requestId}] Starting Q&A streaming API handler`);

  if (req.method !== 'POST') {
    console.log(`‚ùå [${requestId}] Invalid method: ${req.method}`);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const firebase_uid = req.headers.firebase_uid as string;
  if (!firebase_uid) {
    console.log(`‚ùå [${requestId}] Missing firebase_uid in headers`);
    return res.status(401).json({ error: 'Unauthorized' });
  }
  console.log(`‚úÖ [${requestId}] Firebase UID authenticated`);

  try {
    const { word, meaning, example, userAnswer, evaluationResult, question } = req.body;
    if (!word || !meaning || !example || !userAnswer || !question) {
      console.log(`‚ùå [${requestId}] Missing required fields`);
      return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc' });
    }
    console.log(`‚úÖ [${requestId}] All required fields present`);
    
    // Create context-aware prompt
    const prompt = `
B·∫°n l√† m·ªôt gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp v√† th√¢n thi·ªán. H·ªçc sinh v·ª´a ho√†n th√†nh m·ªôt b√†i t·∫≠p d·ªãch v√† c√≥ c√¢u h·ªèi th√™m.

**B·ªêI C·∫¢NH B√ÄI T·∫¨P:**
- T·ª´ v·ª±ng: "${word}"
- √ù nghƒ©a: "${meaning}"
- C√¢u v√≠ d·ª• g·ªëc: "${example}"
- C√¢u d·ªãch c·ªßa h·ªçc sinh: "${userAnswer}"
- ƒêi·ªÉm s·ªë: ${evaluationResult?.score || 'N/A'}/100
- Nh·∫≠n x√©t: ${evaluationResult?.feedback || 'N/A'}
- L·ªói ƒë√£ ph√°t hi·ªán: ${evaluationResult?.errors?.join(', ') || 'Kh√¥ng c√≥'}
- G·ª£i √Ω ƒë√£ ƒë∆∞a ra: ${evaluationResult?.suggestions?.join(', ') || 'Kh√¥ng c√≥'}

**C√ÇU H·ªéI C·ª¶A H·ªåC SINH:**
"${question}"

**Y√äU C·∫¶U TR·∫¢ L·ªúI:**
H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa h·ªçc sinh m·ªôt c√°ch chi ti·∫øt, d·ªÖ hi·ªÉu v√† h·ªØu √≠ch. S·ª≠ d·ª•ng ng√¥n ng·ªØ th√¢n thi·ªán, chuy√™n nghi·ªáp. N·∫øu c·∫ßn thi·∫øt, h√£y ƒë∆∞a ra v√≠ d·ª• c·ª• th·ªÉ ƒë·ªÉ minh h·ªça.

Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSONL stream v·ªõi format:
- B·∫Øt ƒë·∫ßu: {"e": "start"}
- N·ªôi dung: {"e": "data", "k": "response", "c": "t·ª´ng_t·ª´_m·ªôt"}
- K·∫øt th√∫c: {"e": "end"}

**QUAN TR·ªåNG:** M·ªói ƒë·ªëi t∆∞·ª£ng JSON ph·∫£i n·∫±m tr√™n m·ªôt d√≤ng ri√™ng bi·ªát. KH√îNG s·ª≠ d·ª•ng markdown code block.
`;
    
    console.log(`üìù [${requestId}] Prompt created, length: ${prompt.length} characters`);

    // Set streaming headers
    res.setHeader('Content-Type', 'application/x-ndjson; charset=utf-8');
    res.setHeader('Cache-Control', 'no-cache');
    res.setHeader('Connection', 'keep-alive');
    console.log(`‚úÖ [${requestId}] Streaming headers set`);

    const startTime = Date.now();
    console.log(`üì§ [${requestId}] Calling generateContentStream...`);
    
    // Call streaming API
    const streamResult = await generateContentStream(prompt, 'gemini-1.5-flash');
    
    let buffer = '';
    let chunkCounter = 0;

    // Send start event
    res.write('{"e": "start"}\n');

    for await (const chunk of streamResult.stream) {
      const chunkText = chunk.text();
      console.log(`üîç [${requestId}] RAW Gemini chunk:`, JSON.stringify(chunkText));
      
      buffer += chunkText;
      
      // Process multiple JSON objects on same line
      buffer = buffer.replace(/}\s*{/g, '}\n{');
      console.log(`üìã [${requestId}] Buffer after processing:`, JSON.stringify(buffer));

      let lines = buffer.split('\n');
      
      // Keep last line (might be incomplete) in buffer
      buffer = lines.pop() || '';
      
      for (const line of lines) {
        const trimmedLine = line.trim();
        if (trimmedLine === '') continue;

        // Skip markdown wrappers
        if (trimmedLine.startsWith('```')) {
          console.log(`üîÑ [${requestId}] Skipping markdown wrapper: "${trimmedLine}"`);
          continue;
        }
        
        chunkCounter++;
        
        // Validate JSON before sending to client
        const cleanJson = extractJson(trimmedLine);
        if (cleanJson) {
          const jsonData = safeJsonParse(cleanJson);
          if (jsonData) {
            // Send valid JSON to client
            res.write(cleanJson + '\n');
          }
        } else {
          console.warn(`‚ö†Ô∏è [${requestId}] Chunk #${chunkCounter} is not valid JSON, skipping: "${trimmedLine}"`);
        }
      }
    }

    // Process remaining buffer
    const finalTrimmedLine = buffer.trim();
    if (finalTrimmedLine !== '' && !finalTrimmedLine.startsWith('```')) {
      const cleanJson = extractJson(finalTrimmedLine);
      if (cleanJson) {
        res.write(cleanJson + '\n');
        console.log(`üîÑ [${requestId}] Wrote final buffer content: "${finalTrimmedLine}"`);
      }
    }

    // Send end event
    res.write('{"e": "end"}\n');

    const totalDuration = Date.now() - startTime;
    console.log(`‚è±Ô∏è [${requestId}] Total streaming time: ${totalDuration}ms`);
    
    res.end();
    console.log(`‚úÖ [${requestId}] Q&A stream completed`);

  } catch (error) {
    console.error(`‚ùå [${requestId}] Critical error in Q&A stream:`, error);
    if (!res.writableEnded) {
      res.status(500).json({ error: 'Internal server error', detail: String(error) });
    } else {
      res.end();
    }
  }
}