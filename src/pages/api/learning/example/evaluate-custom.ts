import type { NextApiRequest, NextApiResponse } from 'next';
import { generateContentWithTiming, generateJSONContent } from '@/lib/gemini';

interface EvaluationResult {
  score: number;
  feedback: string;
  errors: string[];
  suggestions: string[];
  examples: string[];
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const firebase_uid = req.headers.firebase_uid as string;
  if (!firebase_uid) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  try {
    const { word, meaning, userAnswer } = req.body;
    
    if (!word || !meaning || !userAnswer) {
      return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc' });
    }

    console.log('üì• Request payload:', { word, meaning, userAnswer });
    
    // T·∫°o prompt cho Gemini API
    const prompt = `
You are a teacher grade and give detail feedback for student
Vocab: ${word}
Meaning: ${meaning}
Userinput: ${userAnswer}

Requirement:
1. Anser with Vietnamese
1. Grade userinput 100 scale.
2. Check grammar and accuracy.
3. Check context.
4. Highlight error.
5. Suggest improvement.
6. Provide example.

Return result as JSON with structure:
{
  "score": number (0-100),
  "feedback": "detail feedback in Vietnamese",
  "errors": ["error 1", "error 2", ...],
  "suggestions": ["suggestion 1", "suggestion 2", ...],
  "examples": ["example 1", "example 2", ...]
}
`;

    console.log('üì§ G·ª≠i y√™u c·∫ßu ƒë√°nh gi√° t·ªõi Gemini API v·ªõi Streaming');
    console.log('üåè Region: asia-southeast1 (Singapore) - T·ªëi ∆∞u t·ªëc ƒë·ªô');
    
    let evaluationResult: EvaluationResult;
    
    try {
      // S·ª≠ d·ª•ng streaming API ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô ph·∫£n h·ªìi
      const result = await generateJSONContent(prompt, 'gemini-1.5-flash');
      console.log(`‚ö° Th·ªùi gian ph·∫£n h·ªìi streaming: ${Date.now() - Date.now()}ms`);
      
      if (result && typeof result === 'object') {
        evaluationResult = result as EvaluationResult;
        console.log('‚úÖ Parsed evaluation result t·ª´ streaming response');
      } else {
        console.warn('‚ö†Ô∏è Streaming response kh√¥ng c√≥ format mong ƒë·ª£i, th·ª≠ parse th·ªß c√¥ng');
        // Fallback parsing logic s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b√™n d∆∞·ªõi
      }
      
    } catch (streamingError) {
      console.error('‚ùå L·ªói streaming API:', streamingError);
      console.log('üîÑ Fallback to standard API...');
      
      try {
        // Fallback to standard API
        const fallbackResult = await generateContentWithTiming(prompt, 'gemini-1.5-flash', false);
        console.log(`‚ö° Th·ªùi gian ph·∫£n h·ªìi fallback: ${fallbackResult.duration}ms`);
        
        try {
          // T√¨m v√† parse JSON trong text
          let jsonMatch = fallbackResult.text.match(/\{[\s\S]*\}/);
          let jsonText = jsonMatch ? jsonMatch[0] : fallbackResult.text;
          
          // Lo·∫°i b·ªè markdown tr∆∞·ªõc khi parse
          jsonText = jsonText
            .replace(/^```json\s*/i, '')
            .replace(/^```\s*/i, '')
            .replace(/\s*```\s*$/i, '')
            .trim();
          
          evaluationResult = JSON.parse(jsonText);
          console.log('‚úÖ Parsed evaluation result t·ª´ fallback:', evaluationResult);
        } catch (parseError) {
          console.error('‚ùå L·ªói parse JSON fallback:', parseError);
          return res.status(500).json({ error: 'Error parsing Gemini response' });
        }
        
      } catch (fallbackError) {
        console.error('‚ùå C·∫£ streaming v√† fallback ƒë·ªÅu th·∫•t b·∫°i:', fallbackError);
        return res.status(500).json({ error: 'Gemini API error', detail: String(fallbackError) });
      }
    }

    // Ki·ªÉm tra v√† ƒë·∫£m b·∫£o c√°c tr∆∞·ªùng ƒë√∫ng ki·ªÉu
    if (!evaluationResult.score || isNaN(evaluationResult.score)) evaluationResult.score = 50;
    if (!evaluationResult.feedback || typeof evaluationResult.feedback !== 'string') evaluationResult.feedback = '';
    if (!Array.isArray(evaluationResult.errors)) evaluationResult.errors = [];
    if (!Array.isArray(evaluationResult.suggestions)) evaluationResult.suggestions = [];
    if (!Array.isArray(evaluationResult.examples)) evaluationResult.examples = [];
    
    // L∆∞u k·∫øt qu·∫£ ƒë√°nh gi√° v√†o c∆° s·ªü d·ªØ li·ªáu (n·∫øu c·∫ßn)
    // TODO: Implement this if needed

    // Ensure evaluationResult is defined before returning
    if (!evaluationResult) {
      return res.status(500).json({ error: 'Failed to generate evaluation result' });
    }
    return res.status(200).json(evaluationResult);
  } catch (error) {
    console.error('‚ùå Error in custom sentence evaluation:', error);
    return res.status(500).json({ error: 'Internal server error', detail: String(error) });
  }
}