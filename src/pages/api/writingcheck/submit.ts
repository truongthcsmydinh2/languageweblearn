import type { NextApiRequest, NextApiResponse } from 'next';
import { prisma } from '@/lib/prisma';

interface GeminiResponse {
  accuracy: number;
  feedback: string;
  errors: string[];
  suggestions: string[];
  corrected_version: string;
  advice: string;
  vocabulary_analysis: {
    word: string;
    current_band: string;
    suggested_alternatives: {
      word: string;
      band: string;
    }[];
  }[];
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { lessonId, sentenceId, userAnswer, originalSentence, answerKey, lessonType, lessonLevel } = req.body;
    
    console.log('üì• Request payload:', { lessonId, sentenceId, userAnswer, originalSentence, lessonType, lessonLevel });
    
    if (!lessonId || !userAnswer || !originalSentence) {
      return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc' });
    }

    // Ki·ªÉm tra lessonId v√† sentenceId c√≥ t·ªìn t·∫°i kh√¥ng
    try {
      const lesson = await prisma.writingLesson.findUnique({ where: { id: lessonId } });
      if (!lesson) {
        return res.status(400).json({ error: `LessonId ${lessonId} kh√¥ng t·ªìn t·∫°i` });
      }
      
      if (sentenceId) {
        const sentence = await prisma.writingSentence.findFirst({ 
          where: { id: sentenceId, lesson_id: lessonId } 
        });
        if (!sentence) {
          return res.status(400).json({ error: `SentenceId ${sentenceId} kh√¥ng thu·ªôc v·ªÅ lessonId ${lessonId}` });
        }
      }
    } catch (checkError) {
      console.error('L·ªói ki·ªÉm tra lesson/sentence:', checkError);
    }

    console.log('‚úÖ ƒê√£ ki·ªÉm tra lessonId v√† sentenceId h·ª£p l·ªá');
    
    const submission = await prisma.writing_submissions.create({
      data: {
        lesson_id: lessonId,
        sentence_id: sentenceId || null,
        user_answer: userAnswer,
        original_sentence: originalSentence,
        score: 0,
        feedback: '',
        errors: '[]',
        suggestions: '[]',
        corrected_version: '',
        advice: ''
      }
    });

    console.log('‚úÖ ƒê√£ t·∫°o submission record:', submission.id);

    const prompt = `
ƒê√°nh gi√° b·∫£n d·ªãch ti·∫øng Anh c·ªßa h·ªçc sinh.
Th√¥ng tin:
- Lo·∫°i b√†i: ${lessonType}
- ƒê·ªô kh√≥: ${lessonLevel}
- C√¢u g·ªëc: "${originalSentence}"
- B·∫£n d·ªãch h·ªçc sinh: "${userAnswer}"
${answerKey ? `- ƒê√°p √°n chu·∫©n: "${answerKey}"` : ''}
Y√™u c·∫ßu: Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON object v·ªõi c√°c tr∆∞·ªùng: accuracy (s·ªë t·ª´ 0-100), feedback (string b·∫±ng ti·∫øng Vi·ªát), errors (array of string b·∫±ng ti·∫øng Vi·ªát), suggestions (array of string b·∫±ng ti·∫øng Vi·ªát), corrected_version (string), advice (string b·∫±ng ti·∫øng Vi·ªát), vocabulary_analysis (array of objects).

Tr∆∞·ªùng vocabulary_analysis l√† m·ªôt m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng, m·ªói ƒë·ªëi t∆∞·ª£ng c√≥ c·∫•u tr√∫c:
{
  "word": "t·ª´ ƒë∆∞·ª£c ph√¢n t√≠ch",
  "current_band": "band hi·ªán t·∫°i c·ªßa t·ª´ (A1, A2, B1, B2, C1, C2)",
  "suggested_alternatives": [
    {
      "word": "t·ª´ thay th·∫ø cao c·∫•p h∆°n",
      "band": "band c·ªßa t·ª´ thay th·∫ø"
    }
  ]
}

H√£y ph√¢n t√≠ch 3-5 t·ª´ quan tr·ªçng trong c√¢u tr·∫£ l·ªùi c·ªßa h·ªçc sinh, ch·ªâ ra band hi·ªán t·∫°i c·ªßa t·ª´ ƒë√≥ (theo CEFR: A1, A2, B1, B2, C1, C2) v√† g·ª£i √Ω 1-3 t·ª´ thay th·∫ø ·ªü band cao h∆°n (n·∫øu c√≥ th·ªÉ).

L∆∞u √Ω: T·∫•t c·∫£ c√°c gi·∫£i th√≠ch, ƒë√°nh gi√° v√† g·ª£i √Ω ph·∫£i ƒë∆∞·ª£c vi·∫øt b·∫±ng ti·∫øng Vi·ªát.`;

    console.log('üì§ G·ª≠i prompt t·ªõi Gemini API');
    
    const geminiRes = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${process.env.GEMINI_API_KEY}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{ role: 'user', parts: [{ text: prompt }] }],
        generationConfig: {
          temperature: 0.3,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
          responseMimeType: 'application/json'
        }
      })
    });

    if (!geminiRes.ok) {
      const errorText = await geminiRes.text();
      console.error('‚ùå Gemini API error:', errorText);
      return res.status(500).json({ error: 'Gemini API error', detail: errorText });
    }

    const geminiData = await geminiRes.json();
    console.log('üì• Gemini response:', JSON.stringify(geminiData).substring(0, 500) + '...');
    
    let feedback: GeminiResponse;
    let rawText = '';

    try {
      if (geminiData.candidates && geminiData.candidates[0]?.content?.parts?.[0]?.text) {
        rawText = geminiData.candidates[0].content.parts[0].text;
        console.log('üìÑ Raw text from Gemini:', rawText);
        
        // T√¨m JSON trong text
        let jsonMatch = rawText.match(/\{[\s\S]*\}/);
        let jsonText = jsonMatch ? jsonMatch[0] : rawText;
        
        feedback = JSON.parse(jsonText);
        console.log('‚úÖ Parsed feedback:', feedback);
      } else {
        console.error('‚ùå Gemini kh√¥ng tr·∫£ v·ªÅ text');
        return res.status(500).json({ error: 'Gemini tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' });
      }
    } catch (parseError) {
      console.error('‚ùå L·ªói parse JSON:', parseError, 'Raw text:', rawText);
      return res.status(500).json({ error: 'L·ªói parse JSON t·ª´ Gemini', detail: rawText });
    }

    // Ki·ªÉm tra v√† ƒë·∫£m b·∫£o c√°c tr∆∞·ªùng ƒë√∫ng ki·ªÉu
    if (!feedback.accuracy || isNaN(feedback.accuracy)) feedback.accuracy = 50;
    if (!feedback.feedback || typeof feedback.feedback !== 'string') feedback.feedback = '';
    if (!Array.isArray(feedback.errors)) feedback.errors = [];
    if (!Array.isArray(feedback.suggestions)) feedback.suggestions = [];
    if (!feedback.corrected_version || typeof feedback.corrected_version !== 'string') feedback.corrected_version = '';
    if (!feedback.advice || typeof feedback.advice !== 'string') feedback.advice = '';
    if (!Array.isArray(feedback.vocabulary_analysis)) feedback.vocabulary_analysis = [];
    
    console.log('‚úÖ ƒê√£ ki·ªÉm tra v√† chu·∫©n h√≥a d·ªØ li·ªáu feedback');

    const score = Math.round((feedback.accuracy / 100) * 10);
    console.log('üìä Score calculated:', score);
    
    try {
      await prisma.writing_submissions.update({
        where: { id: submission.id },
        data: {
          score: score,
          feedback: feedback.feedback,
          errors: JSON.stringify(feedback.errors),
          suggestions: JSON.stringify(feedback.suggestions),
          corrected_version: feedback.corrected_version,
          advice: feedback.advice
        }
      });
      console.log('‚úÖ ƒê√£ update submission th√†nh c√¥ng');
    } catch (updateError) {
      console.error('‚ùå L·ªói update submission:', updateError);
      return res.status(500).json({ error: 'L·ªói update submission', detail: String(updateError) });
    }

    return res.status(200).json(feedback);
  } catch (error) {
    console.error('‚ùå Error in writing submission:', error);
    return res.status(500).json({ error: 'Internal server error', detail: String(error) });
  }
} 