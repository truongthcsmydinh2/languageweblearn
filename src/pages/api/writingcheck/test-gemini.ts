import type { NextApiRequest, NextApiResponse } from 'next';
import { generateContentWithTiming, generateJSONContent } from '@/lib/gemini';
import { safeJsonParse } from '@/utils/jsonUtils';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { userAnswer, originalSentence } = req.body;

  if (!userAnswer || !originalSentence) {
    return res.status(400).json({ error: 'Thi·∫øu d·ªØ li·ªáu c·∫ßn thi·∫øt' });
  }

  try {
    // T·∫°o prompt ƒë∆°n gi·∫£n ƒë·ªÉ test
    const prompt = `
B·∫°n l√† m·ªôt gi√°o vi√™n ti·∫øng Anh. H√£y ƒë√°nh gi√° b·∫£n d·ªãch ti·∫øng Anh c·ªßa h·ªçc sinh.

C√¢u g·ªëc (ti·∫øng Vi·ªát): "${originalSentence}"
B·∫£n d·ªãch c·ªßa h·ªçc sinh (ti·∫øng Anh): "${userAnswer}"

H√£y tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng JSON sau:
{
  "score": s·ªë ƒëi·ªÉm t·ª´ 1-10,
  "feedback": "nh·∫≠n x√©t t·ªïng quan",
  "errors": ["danh s√°ch l·ªói c·ª• th·ªÉ"],
  "suggestions": ["g·ª£i √Ω s·ª≠a l·ªói"],
  "corrected_version": "b·∫£n d·ªãch ƒë√∫ng ho·∫∑c g·ª£i √Ω",
  "advice": "l·ªùi khuy√™n ƒë·ªÉ c·∫£i thi·ªán"
}
`;

    console.log('üì§ G·ª≠i y√™u c·∫ßu ƒë√°nh gi√° t·ªõi Gemini API v·ªõi Streaming');
    console.log('üåè Region: asia-southeast1 (Singapore) - T·ªëi ∆∞u t·ªëc ƒë·ªô');
    
    try {
      // S·ª≠ d·ª•ng streaming API ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô ph·∫£n h·ªìi
      const result = await generateJSONContent(prompt, 'gemini-1.5-flash');
      console.log(`‚ö° Th·ªùi gian ph·∫£n h·ªìi streaming: ${Date.now() - Date.now()}ms`);
      
      let evaluation = null;
      
      if (result && typeof result === 'object') {
        evaluation = result;
        console.log('‚úÖ Parsed evaluation t·ª´ streaming response');
      } else {
        console.warn('‚ö†Ô∏è Streaming response kh√¥ng c√≥ format mong ƒë·ª£i, th·ª≠ parse th·ªß c√¥ng');
        // Fallback parsing logic s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b√™n d∆∞·ªõi
      }
      
    } catch (streamingError) {
      console.error('‚ùå L·ªói streaming API:', streamingError);
      console.log('üîÑ Fallback to standard API...');
      
      try {
        // Fallback to standard API
        const fallbackResult = await generateContentWithTiming(prompt, 'gemini-1.5-flash', false);
        console.log(`‚ö° Th·ªùi gian ph·∫£n h·ªìi fallback: ${fallbackResult.duration}ms`);
        
        // T√¨m v√† parse JSON trong text
        let jsonMatch = fallbackResult.text.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          evaluation = safeJsonParse(jsonMatch[0]);
          if (evaluation) {
            console.log('‚úÖ Parsed evaluation t·ª´ fallback:', evaluation);
          } else {
            // Fallback n·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON
            evaluation = {
              score: 5,
              feedback: fallbackResult.text || 'Kh√¥ng th·ªÉ ƒë√°nh gi√°',
              errors: ['Kh√¥ng th·ªÉ ph√¢n t√≠ch chi ti·∫øt'],
              suggestions: ['H√£y th·ª≠ l·∫°i'],
              corrected_version: '',
              advice: 'H√£y ki·ªÉm tra l·∫°i ng·ªØ ph√°p v√† t·ª´ v·ª±ng'
            };
          }
        } else {
          console.warn('‚ùå Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong fallback response');
          evaluation = {
            score: 5,
            feedback: fallbackResult.text || 'Kh√¥ng th·ªÉ ƒë√°nh gi√°',
            errors: ['L·ªói ph√¢n t√≠ch ph·∫£n h·ªìi'],
            suggestions: ['H√£y th·ª≠ l·∫°i'],
            corrected_version: '',
            advice: 'H√£y ki·ªÉm tra l·∫°i ng·ªØ ph√°p v√† t·ª´ v·ª±ng'
          };
        }
        
      } catch (fallbackError) {
        console.error('‚ùå C·∫£ streaming v√† fallback ƒë·ªÅu th·∫•t b·∫°i:', fallbackError);
        evaluation = {
          score: 5,
          feedback: 'Kh√¥ng th·ªÉ ƒë√°nh gi√° do l·ªói h·ªá th·ªëng',
          errors: ['L·ªói k·∫øt n·ªëi API'],
          suggestions: ['H√£y th·ª≠ l·∫°i sau'],
          corrected_version: '',
          advice: 'H√£y ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i'
        };
      }
    }
    
    // S·ª≠ d·ª•ng evaluation t·ª´ streaming ho·∫∑c fallback
    if (!evaluation) {
      // Default fallback n·∫øu c·∫£ hai ƒë·ªÅu th·∫•t b·∫°i
      evaluation = {
        score: 5,
        feedback: 'Kh√¥ng th·ªÉ ƒë√°nh gi√° c√¢u tr·∫£ l·ªùi n√†y',
        errors: ['L·ªói h·ªá th·ªëng'],
        suggestions: ['H√£y th·ª≠ l·∫°i'],
        corrected_version: originalSentence,
        advice: 'H√£y ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i'
      };
    }

    return res.status(200).json({
      success: true,
      ...evaluation
    });

  } catch (error) {
    console.error('Error testing Gemini:', error);
    return res.status(500).json({ 
      error: 'L·ªói server',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}