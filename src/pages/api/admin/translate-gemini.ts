import type { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { englishText } = req.body;
  if (!englishText) {
    return res.status(400).json({ error: 'Thi·∫øu vƒÉn b·∫£n ti·∫øng Anh' });
  }

  try {
    // T·∫°o prompt cho Gemini: D·ªãch t·ª´ ti·∫øng Anh sang ti·∫øng Vi·ªát v√† tr·∫£ v·ªÅ lo·∫°i t·ª´
    const prompt = `D·ªãch sang ti·∫øng Vi·ªát: "${englishText}"
Y√™u c·∫ßu:
1. D·ªãch t·ª± nhi√™n, ch√≠nh x√°c.
2. X√°c ƒë·ªãnh lo·∫°i t·ª´ (part of speech) v√† tr·∫£ v·ªÅ b·∫±ng ti·∫øng Anh (e.g. noun, verb, adjective, adverb, phrasal verb, noun phrase, ...).
3. Ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON v·ªõi 2 tr∆∞·ªùng: vi (nghƒ©a ti·∫øng Vi·ªát), pos (lo·∫°i t·ª´, ti·∫øng Anh).
V√≠ d·ª•: {"vi": "b·∫±ng t·ªët nghi·ªáp", "pos": "noun"}`;

    console.log('üì§ G·ª≠i y√™u c·∫ßu d·ªãch t·ªõi Gemini API');
    console.log('üîë API Key:', process.env.GEMINI_API_KEY ? 'ƒê√£ c·∫•u h√¨nh' : 'Ch∆∞a c·∫•u h√¨nh');
    
    const geminiRes = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'x-goog-api-key': process.env.GEMINI_API_KEY || ''
      },
      body: JSON.stringify({
        contents: [{ role: 'user', parts: [{ text: prompt }] }],
        generationConfig: {
          temperature: 0.3,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048, // TƒÉng gi·ªõi h·∫°n token
        }
      })
    });

    console.log('üìä Response status:', geminiRes.status);
    console.log('üìä Response headers:', Object.fromEntries(geminiRes.headers.entries()));

    if (!geminiRes.ok) {
      const errorText = await geminiRes.text();
      console.error('‚ùå Gemini API error:', errorText);
      console.error('‚ùå Status:', geminiRes.status);
      return res.status(500).json({ error: 'L·ªói Gemini API', detail: errorText });
    }

    const geminiData = await geminiRes.json();
    console.log('üì• Gemini response received');
    console.log('üìÑ Raw response:', JSON.stringify(geminiData).substring(0, 500) + '...');
    
    let translatedText = '';
    let partOfSpeech = '';
    
    try {
      let rawText = geminiData?.candidates?.[0]?.content?.parts?.[0]?.text || '';
      if (!rawText) rawText = geminiData?.candidates?.[0]?.content?.text || '';
      if (!rawText) rawText = geminiData?.text || '';
      if (!rawText) rawText = geminiData?.content || '';
      // Th·ª≠ parse JSON
      try {
        const json = JSON.parse(rawText);
        translatedText = json.vi || '';
        partOfSpeech = json.pos || '';
      } catch {
        // N·∫øu kh√¥ng ph·∫£i JSON, fallback nh∆∞ c≈©
        translatedText = rawText;
      }
      // Ki·ªÉm tra finishReason
      const finishReason = geminiData?.candidates?.[0]?.finishReason;
      console.log('üèÅ Finish reason:', finishReason);
      if (finishReason === 'MAX_TOKENS') {
        console.warn('‚ö†Ô∏è Response b·ªã c·∫Øt do v∆∞·ª£t qu√° gi·ªõi h·∫°n token');
      }
      console.log('üìù Extracted text:', translatedText.substring(0, 200) + '...');
      if (partOfSpeech) console.log('üìù Extracted part of speech:', partOfSpeech);
    } catch (parseError) {
      console.error('‚ùå L·ªói parse response:', parseError);
      console.error('‚ùå Raw response:', geminiData);
      return res.status(500).json({ error: 'L·ªói parse response t·ª´ Gemini', detail: String(parseError) });
    }

    if (!translatedText) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y text trong response');
      console.error('‚ùå Full response:', JSON.stringify(geminiData));
      
      // Fallback: th·ª≠ d·ªãch v·ªõi prompt ƒë∆°n gi·∫£n h∆°n
      console.log('üîÑ Th·ª≠ l·∫°i v·ªõi prompt ƒë∆°n gi·∫£n h∆°n...');
      const simplePrompt = `Translate to Vietnamese: "${englishText}"`;
      
      const fallbackRes = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'x-goog-api-key': process.env.GEMINI_API_KEY || ''
        },
        body: JSON.stringify({
          contents: [{ role: 'user', parts: [{ text: simplePrompt }] }],
          generationConfig: {
            temperature: 0.3,
            maxOutputTokens: 1024,
          }
        })
      });
      
      if (fallbackRes.ok) {
        const fallbackData = await fallbackRes.json();
        translatedText = fallbackData?.candidates?.[0]?.content?.parts?.[0]?.text || '';
        console.log('‚úÖ Fallback th√†nh c√¥ng:', translatedText.substring(0, 100) + '...');
      } else {
        return res.status(500).json({ error: 'Gemini kh√¥ng tr·∫£ v·ªÅ b·∫£n d·ªãch', detail: JSON.stringify(geminiData) });
      }
    }

    // L√†m s·∫°ch text (lo·∫°i b·ªè c√°c ph·∫ßn kh√¥ng c·∫ßn thi·∫øt)
    const cleanText = translatedText
      .replace(/^B·∫£n d·ªãch ti·∫øng Anh:\s*/i, '')
      .replace(/^Translation:\s*/i, '')
      .trim();

    console.log('‚úÖ D·ªãch th√†nh c√¥ng:', cleanText.substring(0, 100) + '...');

    return res.status(200).json({
      success: true,
      translatedText: cleanText,
      originalText: englishText,
      partOfSpeech: partOfSpeech
    });

  } catch (error) {
    console.error('‚ùå L·ªói khi d·ªãch v·ªõi Gemini:', error);
    return res.status(500).json({ 
      error: 'L·ªói server',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
} 